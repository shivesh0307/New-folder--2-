import React, { useState, useEffect } from 'react';
import * as XLSX from 'xlsx';

const FileUpload = ({ addEntries }) => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [message, setMessage] = useState('');
  const [lastCopiedRow, setLastCopiedRow] = useState(0); // Initialize with 0

  useEffect(() => {
    // Retrieve the last copied row from local storage when the component mounts
    const lastRow = localStorage.getItem('lastCopiedRow');
    if (lastRow) {
      setLastCopiedRow(parseInt(lastRow, 10));
    }
  }, []);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setSelectedFile(file);
  };

  const handleUpload = () => {
    if (selectedFile) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });

        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const entries = XLSX.utils.sheet_to_json(sheet);

        // Filter out the entries starting from the last copied row
        const entriesToCopy = entries.slice(lastCopiedRow);

        // Update lastCopiedRow with the new value
        setLastCopiedRow(lastCopiedRow + entriesToCopy.length);

        // Store lastCopiedRow in local storage
        localStorage.setItem('lastCopiedRow', lastCopiedRow + entriesToCopy.length);

        // Add the entries to your application
        addEntries(entriesToCopy);
      };
      reader.readAsArrayBuffer(selectedFile);

      setMessage('Success');
    } else {
      setMessage('Error: Upload file');
    }
  };

  return (
    <div>
      {message && <p style={{ color: 'Black' }}>{message}</p>}
      <input type="file" onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload</button>
    </div>
  );
};

export default FileUpload;
